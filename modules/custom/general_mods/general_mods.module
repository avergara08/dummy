<?php

function general_mods_init() {
	global $user;
	if(arg(0) == 'node') {
		$node = menu_get_object();
		if($node && $node->type == 'blog' && $user->uid != $node->uid && !user_access('access_all_user_blogs')){
			_general_mods_custom_access_denied();
		}
	}
	
	if(arg(0) == 'blog'){
		$blog_owner_uid = arg(1);
		if($user->uid != $blog_owner_uid && !user_access('access_all_user_blogs')){
			_general_mods_custom_access_denied();
		}
	}
	
	if(arg(0) == 'taxonomy' && arg(1) == 'term')
		_general_mods_custom_access_denied();
}

function general_mods_menu() {
	$items['custom/twitter'] = array(
		'page callback' => 'general_mods_twitter',
		//'page arguments' => array(2),
		'access callback' => TRUE,
	);
	
	return $items;
}

function general_mods_twitter(){
	/**
	* Usage:
	* Send the url you want to access url encoded in the url paramater, for example (This is with JS):
	* /twitter-proxy.php?url='+encodeURIComponent('statuses/user_timeline.json?screen_name=MikeRogers0&count=2')
	*/
	 
	// The tokens, keys and secrets from the app you created at https://dev.twitter.com/apps
	$config = array(
	'oauth_access_token' => '95842260-FYnc3Vbfy34InlBp4ODxw3swKamb1EPe4ocXIQrdm',
	'oauth_access_token_secret' => 'svbCt38ipXpP9s9DOIDkG1rsDiEh9dyHa0Se0wRLIw',
	'consumer_key' => 'rQtxFrJC0mTSE3e4i1ow',
	'consumer_secret' => 'zjIFyVvQO1TZknOetoNXqjkZQxHANNdQp2qm38fHg',
	'use_whitelist' => false, // If you want to only allow some requests to use this script.
	'base_url' => 'http://api.twitter.com/1.1/'
	);
	
	/*
	* Ok, no more config should really be needed. Yay!
	*/
	 
	// We'll get the URL from $_GET[]. Make sure the url is url encoded, for example encodeURIComponent('statuses/user_timeline.json?screen_name=MikeRogers0&count=10&include_rts=false&exclude_replies=true')
	if(!isset($_GET['url'])){
	die('No URL set');
	}
	 
	$url = $_GET['url'];
	 
	 
	if($config['use_whitelist'] && !isset($whitelist[$url])){
	die('URL is not authorised');
	}
	 
	// Figure out the URL parmaters
	$url_parts = parse_url($url);
	parse_str($url_parts['query'], $url_arguments);
	 
	$full_url = $config['base_url'].$url; // Url with the query on it.
	$base_url = $config['base_url'].$url_parts['path']; // Url with the query.
	 
	// Set up the oauth Authorization array
	$oauth = array(
	'oauth_consumer_key' => $config['consumer_key'],
	'oauth_nonce' => time(),
	'oauth_signature_method' => 'HMAC-SHA1',
	'oauth_token' => $config['oauth_access_token'],
	'oauth_timestamp' => time(),
	'oauth_version' => '1.0'
	);
	$base_info = buildBaseString($base_url, 'GET', array_merge($oauth, $url_arguments));
	$composite_key = rawurlencode($config['consumer_secret']) . '&' . rawurlencode($config['oauth_access_token_secret']);
	$oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));
	$oauth['oauth_signature'] = $oauth_signature;
	 
	// Make Requests
	$header = array(
	buildAuthorizationHeader($oauth),
	'Expect:'
	);
	$options = array(
	CURLOPT_HTTPHEADER => $header,
	//CURLOPT_POSTFIELDS => $postfields,
	CURLOPT_HEADER => false,
	CURLOPT_URL => $full_url,
	CURLOPT_RETURNTRANSFER => true,
	CURLOPT_SSL_VERIFYPEER => false
	);
	 
	$feed = curl_init();
	curl_setopt_array($feed, $options);
	$result = curl_exec($feed);
	$info = curl_getinfo($feed);
	curl_close($feed);
	 
	// Send suitable headers to the end user.
	if(isset($info['content_type']) && isset($info['size_download'])){
	header('Content-Type: '.$info['content_type']);
	header('Content-Length: '.$info['size_download']);
	 
	}
	 
	echo($result);
}


function _general_mods_custom_access_denied(){
	global $user;
	if($user->uid){
		drupal_access_denied();
		module_invoke_all('exit');
		exit();
	}else{
		drupal_set_message('Please login first to access this page.', 'warning');
		drupal_goto('user', array('query' => drupal_get_destination()));
	}
}

function general_mods_permission() {
  return array(
    'access_all_user_blogs' => array(
      'title' => t('Access all user blogs'),
      'description' => t('Access all user blogs'),
    ),
  );
}
//
//function general_mods_menu_alter(&$items) {
//	$path = 'blog/%user_uid_optional';
//	$orig_page_callback = $items[$path]['page callback'];
//	$orig_page_arguments = $items[$path]['page arguments'];
//	$items[$path]['page callback'] = '_general_mods_accept_usernames';
//	$items[$path]['page arguments'] = array(1, $orig_page_callback, $orig_page_arguments);
//}
//
//function _general_mods_accept_usernames($account, $orig_page_callback, $orig_page_arguments) {
//	dsm($account);
//}

//function blog_page_user_access($account) {
//  // The visitor must be able to access the site's content.
//  // For a blog to 'exist' the user must either be able to
//  // create new blog entries, or it must have existing posts.
//  return $account->uid && user_access('access content') && (user_access('create blog content', $account) || _blog_post_exists($account));
//}


//$account = user_load(2);
	//drupal_render(general_mods_page_user($account));
function general_mods_node_view($node, $view_mode, $langcode) {
	//dsm($view_mode);
	//dsm($node);
	//if($node->)
	
}

function general_mods_node_view_alter(&$build) {
	static $count = 0;
	
	$count++;
	//dsm($count);
	$node = $build['#node'];
	if($node->type == 'blog'){
		// convert from teaser mode into full mode
		$build['body'][0]['#markup'] = $build['body']['#object']->body['und'][0]['safe_value'];
		if($count > 1)
			$build['#prefix'] = '<div class="line"></div>';
	}
}

//function general_mods_username_alter(&$name, $account){
//	//dsm($account);
//	$account = user_load($account->uid);
//	$first_name = isset($account->field_first_name['und'][0]['safe_value']) ? $account->field_first_name['und'][0]['safe_value'] : '';
//  $last_name = isset($account->field_last_name['und'][0]['safe_value']) ? $account->field_last_name['und'][0]['safe_value'] : '';
//  if($first_name)
//		$name = $first_name . ($last_name ? ' ' . $last_name : '');
//}

function general_mods_form_alter(&$form, &$form_state, $form_id) {
	global $user;
	if($form_id == 'user_profile_form'){
		//dsm($form);
		//$form['user-info-kuno'] = array(
		//	'#type' => 'fieldset',
		//	'#title' => t('User information'),
		//	'#collapsible' => TRUE,
		//	//'#collapsed' => TRUE,
		//	//'#prefix' => '<br /><br />',
		//);
		//
		//$form['user-info-kuno']['field_first_name'] = $form['field_first_name'];
		//unset($form['field_firstname']);
		if(isset($form['picture']))
			$form['picture']['#weight'] = -50;
		
		if(isset($form['block']))
			$form['block']['#weight'] = 50;
		
		if(isset($form['account']))
			$form['account']['#prefix'] = '<br /><div class="line"></div><br />';
	}else if($form_id == 'blog_node_form'){
		$form['author']['#access'] = TRUE;
		if($user->uid != 1){
			$form['author']['name']['#disabled'] = TRUE;
			$form['author']['name']['#description'] = '';
		}
		//dsm($form);
	}
}

function general_mods_preprocess_page(&$variables) {
	global $user;
	$hide_tabs = true;
	if((arg(0) == 'blog' || arg(0) == 'user') && is_numeric(arg(1))) {
		$blog_owner = user_load(arg(1));
		$full_name = theme('username', array('account' => $blog_owner));
		$page_title = strip_tags($full_name);
		if(arg(0) == 'blog'){
			$page_title .= ' \'s blog';
			$breadcrumbs = drupal_get_breadcrumb();
			if($breadcrumbs)
				$breadcrumbs = array($breadcrumbs[0]);
			$breadcrumbs[] = $full_name;
			drupal_set_breadcrumb($breadcrumbs);
		}
		
		drupal_set_title($page_title);
	}
	
	if(arg(0) == 'node'){
		$node = menu_get_object();
		if($node) {
			if($node->type == 'blog') {
				$full_name = theme('username', array('account' => $node));
				$full_name_plain = strip_tags($full_name);
				$page_title = $full_name_plain . ' \'s blog';
				drupal_set_title($page_title . ' <span>/ '. $node->title .'</span>', PASS_THROUGH);
				//$node->title = 'ss';
				
				$breadcrumbs = drupal_get_breadcrumb();
				if($breadcrumbs)
					$breadcrumbs = array($breadcrumbs[0]);
				$breadcrumbs[] = l($full_name_plain . ' \'s blog', 'blog/' . $node->uid);
				$breadcrumbs[] = $node->title;
				//$breadcrumbs = array('x');
				drupal_set_breadcrumb($breadcrumbs);
				//dsm($breadcrumbs);
				
				if($node->uid == $user->uid)
					$hide_tabs = false;
			}
		}
	}
	
	if($hide_tabs)
		$variables['tabs'] = '';
}
//
//function general_mods_preprocess_block(&$variables) {
//	if(in_array($variables['id'], array(3,4))){
//		$variables['elements']['#children'] = 'x';
//		dsm('s');
//		dsm($variables);
//	}
//}


/**
	* Code below from http://stackoverflow.com/questions/12916539/simplest-php-example-retrieving-user-timeline-with-twitter-api-version-1-1 by Rivers
	* with a few modfications by Mike Rogers to support variables in the URL nicely
	*/
	 
function buildBaseString($baseURI, $method, $params) {
	$r = array();
	ksort($params);
	foreach($params as $key=>$value){
	$r[] = "$key=" . rawurlencode($value);
	}
	return $method."&" . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $r));
}
 
function buildAuthorizationHeader($oauth) {
	$r = 'Authorization: OAuth ';
	$values = array();
	foreach($oauth as $key=>$value)
	$values[] = "$key=\"" . rawurlencode($value) . "\"";
	$r .= implode(', ', $values);
	return $r;
}